<?php

//require_once dirname(__FILE__) . '/../../../application/models/ReoccurenceTemplate.php';

/**
 * Test class for Application_Model_ReoccurenceTemplate.
 * Generated by PHPUnit on 2011-11-10 at 22:21:13.
 */
class Application_Model_ReoccurenceTemplateTest extends PHPUnit_Framework_TestCase {

   /**
    * @var Application_Model_ReoccurenceTemplate
    */
   protected $object;

   /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    */
   protected function setUp() {
      $this->object = new Application_Model_ReoccurenceTemplate;
   }

   /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    */
   protected function tearDown() {
      
   }

   public function testFindNthWeekdayInMonth() {

      //Returns the right object
      $this->assertInstanceOf('DateTime', $this->object->findNthWeekdayInMonth(11, 2011, 'Wednesday', 2));
      
      //Second Wednesday in Nov 2011
      $this->assertEquals(1320796800, $this->object->findNthWeekdayInMonth(11, 2011, 'Wednesday', 2)->getTimestamp(), 'wrong algorithm');
      //First Tuesday in Nov 2011
      $this->assertEquals(1320105600, $this->object->findNthWeekdayInMonth(11, 2011, 'Tuesday', 1)->getTimestamp(), 'wrong algorithm');

      //Second Wednesday in Nov 2011 Reverse
      $this->assertEquals(1321488000, $this->object->findNthWeekdayInMonth(11, 2011, 'Thursday', 2, true)->getTimestamp(), 'wrong algorithm');
      //Last Wednesday in Nov 2011
      $this->assertEquals(1322611200, $this->object->findNthWeekdayInMonth(11, 2011, 'Wednesday', 1, true)->getTimestamp(), 'wrong algorithm');

      //Fifth Monday in Feb 2011
      $this->assertFalse($this->object->findNthWeekdayInMonth(02, 2011, 'Monday', 5), 'wrong algorithm');
   }

   public function testFindStartDayOfMonth() {
      
      //Returns the right object
      $this->assertInstanceOf('DateTime', $this->object->findStartDayOfMonth(11, 2011));
      //First day of Nov 2011
      $this->assertEquals(1320105600, $this->object->findStartDayOfMonth(11, 2011)->getTimestamp());
      //Last day of Nov 2011
      $this->assertEquals(1322611200, $this->object->findStartDayOfMonth(11, 2011, true)->getTimestamp());
   }
   
   public function testIsWeekDay() {
      //Thursday
      $this->assertTrue($this->object->isWeekDay(new DateTime('2011-11-10')));
      //Saturday
      $this->assertFalse($this->object->isWeekDay(new DateTime('2011-11-12')));
      
   }
}

?>
